    SubmissionsLeaderboardDiscussions
1. Query all columns for all American cities in CITY with populations larger than 100,000. The CountryCode for America is USA.

SELECT * FROM CITY 
WHERE COUNTRYCODE = 'USA' 
AND POPULATION > 100000;

2. Query the names of all American cities in CITY with populations larger than 120,000. The CountryCode for America is USA.

SELECT NAME FROM CITY 
WHERE COUNTRYCODE = 'USA' 
AND POPULATION > 120000;

3. Query all columns for every row in the CITY table.

SELECT * FROM CITY;

4. Query all columns for a city in CITY with the ID 1661.

SELECT * FROM CITY WHERE ID = 1661; 

5. Query the details for all the Japanese cities in CITY. The COUNTRYCODE for Japan is JPN.

SELECT * FROM CITY WHERE COUNTRYCODE = 'JPN';        

6. Query the the names of all the Japanese cities in CITY. The COUNTRYCODE for Japan is JPN.

SELECT NAME FROM CITY WHERE COUNTRYCODE = 'JPN';        

7. Query a list of CITY and STATE from STATION.
SELECT CITY,STATE FROM STATION;       

8. Query a list of CITY names from STATION with even ID numbers only. You may print the results in any order, but must exclude duplicates from your answer.

SELECT DISTINCT CITY FROM STATION WHERE MOD(ID,2)=0 ORDER BY CITY ASC;

9. Let NUM be the number of CITY entries in STATION, and NUMunique be the number of unique cities. Query the value of NUMâˆ’NUMunique from STATION.

In other words, query the number of non-unique CITY names in STATION by subtracting the number of unique CITY entries in the table from the total number of CITY entries in the table.

SELECT COUNT(CITY) - COUNT(DISTINCT CITY) FROM STATION;       

10. Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.

Sample Input

Let's say that CITY only has four entries: DEF, ABC, PQRS and WXY

Sample Output

ABC 3

PQRS 4

Explanation

When ordered alphabetically, the CITY names are listed as ABC, DEF, PQRS, and WXY, with the respective lengths 3,3,4,3,3,4, and 33. The longest-named city is obviously PQRS, but there are 33 options for shortest-named city; we choose ABC, because it comes first alphabetically.

select city, length(city) from station order by length(city) DESC,city ASC fetch first row only;
select city, length(city) from station order by length(city) asc ,city asc fetch first row only; 

11. Query the list of CITY names starting with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.

SELECT DISTINCT(CITY) FROM STATION WHERE CITY LIKE 'A%' OR CITY LIKE 'E%' OR CITY LIKE 'I%' OR CITY LIKE 'O%' 
OR CITY LIKE 'U%' ORDER BY CITY ASC;       

12. Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.
SELECT DISTINCT(CITY) FROM STATION WHERE CITY LIKE '%a' OR CITY LIKE '%e' OR CITY LIKE '%i' OR CITY LIKE '%o' 
OR CITY LIKE '%u';       

13.
Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.

/*
Enter your query here. MYSQL
*/
select distinct CITY
from STATION
where
(
    lower(city) like 'a%' or
    lower(city) like 'e%' or
    lower(city) like 'i%' or
    lower(city) like 'o%' or
    lower(city) like 'u%')
    and
(
    lower(city) like '%a' or
    lower(city) like '%e' or
    lower(city) like '%i' or
    lower(city) like '%o' or
    lower(city) like '%u')    ;
    
    
14. Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.

select distinct CITY
from STATION
where
lower(substring(CITY,1,1)) not in ('a','e','i','o','u');

15. Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.

select distinct CITY
from STATION
where
lower(substring(CITY,-1,1)) not in ('a','e','i','o','u');

16. Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.
SELECT DISTINCT CITY 
FROM STATION 
WHERE 
LOWER(SUBSTR(CITY,1,1)) NOT IN ('a','e','i','o','u') 
OR 
LOWER(SUBSTR(CITY, LENGTH(CITY),1)) NOT IN ('a','e','i','o','u');   

17. Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.

SELECT DISTINCT CITY FROM STATION WHERE 
LOWER(SUBSTR(CITY,1,1)) NOT IN ('a','e','i','o','u') AND 
LOWER(SUBSTR(CITY, LENGTH(CITY),1)) NOT IN ('a','e','i','o','u');   

18. Query the Name of any student in STUDENTS who scored higher than Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.

SELECT NAME
FROM STUDENTS
WHERE marks > 75
order by substr(name,length(name)-2,3), ID;

20. Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.
SELECT NAME 
FROM EMPLOYEE
ORDER BY NAME;

21. Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than per month who have been employees for less than months. Sort your result by ascending employee_id.
SELECT NAME
FROM EMPLOYEE
WHERE
SALARY > 2000 AND
MONTHS < 10
;

22. Query the sum of Northern Latitudes (LAT_N) from STATION having values greater than and less than . Truncate your answer to decimal places.
select ROUND(SUM(LAT_N),4) 
FROM STATION
WHERE
/*LAT_N BETWEEN 
38.7880 AND
137.2345;*/
LAT_N > 38.7880 AND
LAT_N < 137.2345;

23. Query the greatest value of the Northern Latitudes (LAT_N) from STATION that is less than . Truncate your answer to decimal places.
SELECT MAX(ROUND(LAT_N,4))
FROM STATION
WHERE LAT_N < 137.2345;

24. Query the Western Longitude (LONG_W) for the largest Northern Latitude (LAT_N) in STATION that is less than . Round your answer to decimal places.
SELECT ROUND(LONG_W,4)
FROM STATION
WHERE
LAT_N < 137.2345
ORDER BY LAT_N DESC LIMIT 1;

25. Query the smallest Northern Latitude (LAT_N) from STATION that is greater than . Round your answer to decimal places.
/*SELECT ROUND(MIN(LAT_N),4)
FROM STATION
WHERE
LAT_N > 38.7780;*/

SELECT ROUND(LAT_N,4)
FROM STATION
WHERE
LAT_N > 38.7780
ORDER BY LAT_N LIMIT 1;

26. Query the Western Longitude (LONG_W)where the smallest Northern Latitude (LAT_N) in STATION is greater than . Round your answer to decimal places.
SELECT ROUND(LONG_W,4)
FROM STATION
WHERE LAT_N =
(SELECT MIN(LAT_N) FROM STATION
WHERE LAT_N > 38.7780);

27. Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:

    Equilateral: It's a triangle with 3 sides of equal length.
Isosceles: It's a triangle with 2 sides of equal length.
Scalene: It's a triangle withsides of differing lengths.
Not A Triangle: The given values of A, B, and C don't form a triangle.

SELECT 
CASE 
WHEN A = B AND B = C and A = C
THEN 'Equilateral'
WHEN (A + B) <= C OR (B + C) <= A OR (C + A) <= B
THEN 'Not A Triangle'
WHEN A = B OR B = C OR C = A
THEN  'Isosceles'
ELSE 'Scalene'
END TYPE
FROM TRIANGLES;

28. Generate the following two result sets:

    Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a parenthetical (i.e.: enclosed in parentheses). For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S).

    Query the number of ocurrences of each occupation in OCCUPATIONS. Sort the occurrences in ascending order, and output them in the following format:

    There are a total of [occupation_count] [occupation]s.

    where [occupation_count] is the number of occurrences of an occupation in OCCUPATIONS and [occupation] is the lowercase occupation name. If more than one Occupation has the same [occupation_count], they should be ordered alphabetically.


SELECT NAME || '(' || SUBSTR(OCCUPATION,1,1) || ')'
FROM OCCUPATIONS
ORDER BY NAME;

SELECT 'There are a total of ' || COUNT(OCCUPATION) || ' ' || lower(OCCUPATION) || 's.'
FROM OCCUPATIONS
GROUP BY OCCUPATION
order by count(OCCUPATION);


29. Pivot the Occupation column in OCCUPATIONS so that each Name is sorted alphabetically and displayed underneath its corresponding Occupation. The output column headers should be Doctor, Professor, Singer, and Actor, respectively.

Note: Print NULL when there are no more names corresponding to an occupation.


Correct:
set @r1=0, @r2=0, @r3=0, @r4=0;
select min(Doctor), min(Professor), min(Singer), min(Actor)
from(select case when Occupation="Doctor" then (@r1:=@r1+1) when Occupation="Professor" then (@r2:=@r2+1) when Occupation="Singer" then (@r3:=@r3+1) when Occupation="Actor" then (@r4:=@r4+1) end as RowNumber,
case when Occupation="Doctor" then Name end as Doctor,
case when Occupation="Professor" then Name end as Professor,
case when Occupation="Singer" then Name end as Singer,
case when Occupation="Actor" then Name end as Actor from OCCUPATIONS order by Name
) Temp group by RowNumber;

Wrong:
SELECT Min(a.doctors), 
       Min(a.professors), 
       Min(a.singers), 
       Min(a.actors) 
FROM
(SELECT Row_number()
                 over (
                   PARTITION BY occupation
                   ORDER BY name) row_num,
               CASE
                 WHEN occupation = 'Doctor' THEN name
               END                AS Doctors,
               CASE
                 WHEN occupation = 'Professor' THEN name
               END                AS Professors,
               CASE
                 WHEN occupation = 'Singer' THEN name
               END                AS Singers,
               CASE
                 WHEN occupation = 'Actor' THEN name
               END                AS Actors
        FROM   occupations) a
GROUP  BY a.row_num 
ORDER  BY a.row_num;    


SELECT Doctor, Professor, Singer, Actor FROM (
SELECT ROW_NUMBER() OVER (PARTITION BY occupation ORDER BY name) as rn, name, occupation FROM       occupations) 
PIVOT 
(MAX(name) FOR occupation IN ('Doctor' as Doctor,
                              'Professor' as Professor, 
                              'Singer' as Singer, 
                              'Actor' as Actor)
) 
ORDER BY rn;

30. You are given a table, BST, containing two columns: N and P, where N represents the value of a node in Binary Tree, and P is the parent of N.

SELECT N,
CASE
WHEN P is NULL THEN 'Root'
WHEN N in (SELECT P FROM BST) THEN 'Inner'
ELSE 'Leaf'
END
FROM BST
ORDER by N;


SELECT N, 
IF(P IS NULL,"Root",IF((SELECT COUNT(*) FROM BST WHERE P=B.N)>0,"Inner","Leaf")) 
FROM BST AS B ORDER BY N;


SELECT BT.N,
CASE
    WHEN BT.P IS NULL THEN 'Root'
    WHEN EXISTS (SELECT B.P FROM BST B WHERE B.P = BT.N) THEN 'Inner'        
    ELSE 'Leaf'
END
FROM BST BT
ORDER BY BT.N;
